#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
"""\
{prog}: tool for merging packages directories

Syntax:
  {prog} --dest <destination_dir> --src <source_dir> [--src <source_dir>]
  {prog} [--help]

"""
# Copyright 2004-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import shutil
import sys
import getopt

import univention.updater.repository as urepo
from univention.updater.locking import UpdaterLock

l_package = {}  # type: Dict[Tuple[str, str], Tuple[str, str, int]] # (package, arch) -> (filename, version, arg)
p_remove = []


def usage(fd=sys.stdout):
    """
    Print usage message.

    :param file fd: Override standard error output. Defaults to :py:obj:`sys.stdout`.
    """
    fd.write(__doc__.format(prog=os.path.basename(__file__)))


def compare(version1, version2):
    """ Test if version1 is newer than version2 """
    resultCode = os.system('dpkg --compare-versions %s gt %s >/dev/null 2>&1' % (version1, version2))
    return resultCode == 0


def walking(arg, dirname, names):
    """ Update l_package hash with new and p_remove hash with obsolete .deb files """
    for f in names:
        filename = os.path.join(dirname, f)

        if filename.endswith('.deb') or filename.endswith('.udeb'):
            out = os.popen('dpkg -I %s' % filename)

            package = ''
            version = ''
            arch = ''
            for line in out.readlines():
                line = line.strip()
                if line.startswith('Package: '):
                    package = ' '.join(line.split(' ', 1)[1:])
                if line.startswith('Version: '):
                    version = ' '.join(line.split(' ', 1)[1:])
                if line.startswith('Architecture: '):
                    arch = ' '.join(line.split(' ', 1)[1:])

            key = (package, arch)
            record = l_package.get(key)
            if record:
                if compare(version, record[1]):
                    p_remove.append(record[0])
                    l_package[key] = [filename, version, arg]
                else:
                    p_remove.append(filename)
            else:
                l_package[key] = [filename, version, arg]


def cleanup_repository(directory):
    """ Remove all .deb files recursively from directory """
    def _walk(fp_debug, dirname, names):
        for name in names:
            filename = os.path.join(dirname, name)
            if not os.path.isfile(filename):
                continue
            if filename.endswith('.deb') or filename.endswith('.udeb'):
                try:
                    os.unlink(filename)
                except EnvironmentError:
                    fp_debug.write('Warning: failed to remove %s\n' % filename)

    fp_debug = open('/var/log/univention/repository.log', 'a+')
    try:
        os.path.walk(directory, _walk, fp_debug)
    finally:
        fp_debug.close()


def parse_args():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] in ['-h', '-?', '--help']:
        usage()
        sys.exit(0)

    longopts = ['dest=', 'src=']
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', longopts)
    except getopt.error as msg:
        print(msg)
        sys.exit(1)

    if True:
        source_dirs = []
        for opt, val in opts:
            if opt == '--dest':
                destination_dir = val
            elif opt == '--src':
                src = urepo.get_repo_basedir(val)
                source_dirs.append(src)

        if not destination_dir:
            usage()
            sys.exit(1)

        destination_dir = urepo.get_repo_basedir(destination_dir)

        if len(source_dirs) < 1:
            usage()
            sys.exit(1)

    return destination_dir, source_dirs


def main():
    destination_dir, source_dirs = parse_args()

    with UpdaterLock():
        os.path.walk(destination_dir, walking, 1)

        for dirname in source_dirs:
            src = urepo.get_repo_basedir(dirname)
            os.path.walk(src, walking, 0)

        packages_dir = os.path.join(destination_dir)
        if not os.path.exists(packages_dir):
            os.mkdir(packages_dir)

        fp_debug = open('/var/log/univention/repository.log', 'a+')
        for k in l_package.keys():
            if l_package[k][2] == 0:  # if not dest dir
                try:
                    dest = os.path.join(packages_dir, k[1])
                    shutil.copy(l_package[k][0], dest)
                except EnvironmentError:
                    fp_debug.write('Error: faild to copy %s\n' % dest)

        for f in p_remove:
            try:
                os.remove(f)
            except EnvironmentError:
                fp_debug.write('Warning: failed to remove %s\n' % f)

        save_dir = os.path.realpath(os.path.curdir)

        for dirname in source_dirs:
            if dirname == packages_dir:
                continue
            cleanup_repository(dirname)

            urepo.update_indexes(dirname, stdout=fp_debug, stderr=fp_debug)

        os.chdir(save_dir)
        os.chdir(packages_dir)
        urepo.update_indexes(packages_dir, stdout=fp_debug, stderr=fp_debug)
        fp_debug.close()


if __name__ == '__main__':
    main()
