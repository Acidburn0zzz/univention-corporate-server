#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: New listener module API test, async, parallelism 1
## tags: []
## roles: []
## exposure: dangerous
## packages:
##   - univention-directory-listener-async
## bugs: [44786]

import os
import re
import pwd
import time
import logging
import subprocess
from collections import OrderedDict

from ldap.filter import filter_format
from ldap.filter import escape_filter_chars
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
import univention.testing.udm as udm_test
from univention.testing.decorators import SetTimeout
import univention.testing.utils as utils
from univention.testing.ucs_samba import wait_for_drs_replication, wait_for_s4connector
from univention.config_registry import handler_set
from univention.listener.handler_logging import get_logger


lm_name = 'test-{}'.format(uts.random_name())
lm_file = os.path.join('/usr/lib/univention-directory-listener/system', '{}.py'.format(lm_name))
log_file = os.path.join('/tmp', '{}.log'.format(uts.random_name()))
uid_default_file = None
uid_root_file = None
verify_ldap_object = SetTimeout(utils.verify_ldap_object, 60)
CELERY_CONFIG = '/etc/default/celery-worker-async-listener-modules'


def cleanup():
	print('Stopping celery-worker-async-listener-modules.service...')
	subprocess.call(['/sync/univention-directory-listener/share/stop-workers'])
	subprocess.call(['systemctl', 'stop', 'celery-worker-async-listener-modules.service'])
	# be extra paranoid to not mess up jenkins env
	time.sleep(5)
	subprocess.call(['pkill', '-9', '-f', 'celery worker --app=univention.listener.async.celery:app.*{}'.format(lm_name)])
	for filename in (lm_file, '{}c'.format(lm_file), log_file, uid_default_file, uid_root_file):
		print('Deleting {!r}...'.format(filename))
		try:
			os.remove(filename)
		except (OSError, IOError) as exc:
			print(exc)
	subprocess.call(['/sync/univention-directory-listener/share/update-celery-configuration'])
	print('Restarting celery-worker-async-listener-modules.service...')
	subprocess.call(['systemctl', 'restart', 'celery-worker-async-listener-modules.service'])
	print('Restarting univention-directory-listener...')
	subprocess.call(['systemctl', 'restart', 'univention-directory-listener.service'])


def main():
	global uid_default_file, uid_root_file

	username = uts.random_name()
	employeeType = uts.random_name()
	test_id = uts.random_name()
	street = uts.random_name()
	roomNumber = uts.random_name()
	uid_default_file = os.path.join('/tmp', '{}.log'.format(uts.random_name()))
	uid_root_file = os.path.join('/tmp', '{}'.format(uts.random_name()))
	lm_logger_path = os.path.join('/var/log/univention/listener_modules', '{}.log'.format(lm_name))
	parallelism = 1
	text_replacements = {
		'TEST_ID': test_id,
		'MODULE_NAME': lm_name,
		'LOGFILE': log_file,
		'LDAP_FILTER': filter_format('(&(objectClass=inetOrgPerson)(uid=%s))', (username,)),
		'UID_ROOT_FILE': uid_root_file,
		'UID_DEFAULT_FILE': uid_default_file,
		'IMPORTS': 'from univention.listener.async import AsyncListenerModuleHandler',
		'HANDLER_SUPER_CLASS': 'AsyncListenerModuleHandler',
		'CONFIG_MODULE_ARGS': '\t\trun_asynchronously = True\n\t\tparallelism = {}\n'.format(parallelism)
	}

	# create test listener module
	with open('listener_module_testpy', 'rb') as fp:
		lm_txt = fp.read()

	for k, v in text_replacements.items():
		lm_txt = lm_txt.replace('@@{}@@'.format(k), v)

	with open(lm_file, 'wb') as fp:
		fp.write(lm_txt)
	print('Wrote listener module to {!r}.'.format(lm_file))

	print('test_id: {!r}'.format(test_id))
	print('Listener module name: {!r}'.format(lm_name))
	print('Action log file: {!r}'.format(log_file))
	print('Listener module log file: {!r}'.format(lm_logger_path))
	print('UID default (listener) file: {!r}'.format(uid_default_file))
	print('UID root file: {!r}'.format(uid_root_file))
	print('run_asynchronously: True')
	print('parallelism: {}'.format(parallelism))

	# create, modify, move, modify
	with udm_test.UCSTestUDM() as udm, ucr_test.UCSTestConfigRegistry() as ucr:
		# handler_set(['listener/module/{}/debug/level=4'.format(lm_name)])
		print('Restarting celery-worker-async-listener-modules.service...')
		subprocess.call(['systemctl', 'restart', 'celery-worker-async-listener-modules.service'])

		# check that the celery worker config was updated
		conf = OrderedDict()
		for line in open(CELERY_CONFIG, 'rb'):
			m = re.match(r'^(?P<key>[\w_-]*)=(?P<value>.*)$', line)
			if m:
				k, v = m.groups()
				conf[k] = v
		print('   --- Celery worker configuration ---')
		print('\n'.join('{}={}'.format(k, v) for k, v in conf.items()))
		if 'true' not in conf.get('ENABLED'):
			utils.fail('Bad Celery worker configuration: not ENABLED: {!r}'.format(conf.get('ENABLED')))
		if lm_name not in conf.get('CELERYD_NODES'):
			utils.fail('Bad Celery worker configuration: listener module name {!r} missing in CELERYD_NODES: {!r}'.format(
				lm_name, conf.get('CELERYD_NODES')))
		if '-c:{} {}'.format(lm_name, parallelism) not in conf.get('CELERYD_OPTS'):
			utils.fail('Bad Celery worker configuration: parallelism config {!r} missing in CELERYD_OPTS: {!r}'.format(
				'-c:{} {}'.format(lm_name, parallelism), conf.get('CELERYD_OPTS')))
		print('OK: --- Celery worker configuration ---')

		print('Restarting univention-directory-listener...')
		subprocess.call(['systemctl', 'restart', 'univention-directory-listener.service'])

		lm_logger = get_logger(lm_name, path=lm_logger_path)
		lm_logger.addHandler(logging.StreamHandler())

		lm_logger.info('*** Creating user...')
		userdn, username = udm.create_user(
			username=username
		)
		wait_for_drs_replication('cn={}'.format(escape_filter_chars(username)))
		verify_ldap_object(userdn, should_exist=True)

		lm_logger.info('*** Checking setuid()...')
		count = 0
		while True:
			try:
				file0_uid = os.stat(uid_root_file).st_uid
				break
			except OSError:
				count += 1
				if count > 6:
					raise
				else:
					print('Waiting 10s for {!r} to show up...'.format(uid_root_file))
					time.sleep(10)
		if file0_uid != 0:
			utils.fail('File (root) {!r} has uid={!r}, expected 0.'.format(uid_root_file, file0_uid))
		file_default_uid = os.stat(uid_default_file).st_uid
		listener_uid = pwd.getpwnam('listener').pw_uid
		if file_default_uid != listener_uid:
			utils.fail('File (listener) {!r} has uid={!r}, expected {!r}.'.format(uid_default_file, file_default_uid, listener_uid))

		lm_logger.info('*** Modifying user (employeeType)...')
		udm.modify_object(
			'users/user',
			dn=userdn,
			employeeType=employeeType
		)

		lm_logger.info('*** Moving user (to LDAP base)...')
		new_dn = udm.move_object(
			'users/user',
			dn=userdn,
			position=ucr['ldap/base']
		)

		lm_logger.info('*** Modifying user (street) should not trigger listener module...')
		udm.modify_object(
			'users/user',
			dn=new_dn,
			street=street
		)

		lm_logger.info('*** Moving user (to cn=users)...')
		new_dn = udm.move_object(
			'users/user',
			dn=new_dn,
			position='cn=users,{}'.format(ucr['ldap/base'])
		)

		lm_logger.info('*** Modifying user (roomNumber) and triggering error...')
		udm.modify_object(
			'users/user',
			dn=new_dn,
			roomNumber=roomNumber
		)

		lm_logger.info('*** Deleting user...')

	# wait for UCSTestUDM context manager to delete user
	wait_for_drs_replication('(!(cn={}))'.format(escape_filter_chars(username)))
	wait_for_s4connector()
	verify_ldap_object(new_dn, should_exist=False)
	time.sleep(15)  # give listener time to settle: wait for post_run()

	last_changed = 0
	lm_logger.info('*** os.stat(log_file).st_mtime=%r', os.stat(log_file).st_mtime)
	while last_changed != os.stat(log_file).st_mtime:
		last_changed = os.stat(log_file).st_mtime
		lm_logger.info('*** last_changed=%r', last_changed)
		lm_logger.info('*** File changed, waiting 30s...')
		time.sleep(30)

	lm_logfile = '/var/log/univention/listener_modules/{}.log'.format(lm_name)
	print('*******************************************')
	print('    {}'.format(lm_logfile))
	print('----------')
	with open(lm_logfile, 'rb') as fp:
		print(fp.read())
	print('*******************************************')

	# check logfile for correct entries
	with open(log_file, 'rb') as fp:
		log_text = fp.read()
		print('*******************************************')
		print('    {}'.format(log_file))
		print('----------')
		print(log_text)
		print('*******************************************')

	lines = (l.strip() for l in log_text.split('\n') if l.strip())
	operations = ('clean', 'initialize', 'pre_run', 'create', 'modify employeeType {}'.format(employeeType), 'move', 'move', 'modify roomNumber {}'.format(roomNumber), 'error_handler', 'remove', 'post_run')
	for operation in operations:
		exp = '{} {}'.format(test_id, operation)
		try:
			line = lines.next()
		except StopIteration:
			if operation == 'post_run':
				print('Ignoring missing "post_run" - probably to much going on...')
				line = exp
			else:
				utils.fail('Missing operation(s). Expected: {!r}.'.format(operations))
		if not line.startswith(exp):
			if line == 'post_run':
				print('Found a possible intermittent post_run, looking for a pre_run...')
				line = lines.next()
				if line == 'pre_run':
					print('Ignoring intermittent post_run, pre_run...')
					continue
				else:
					utils.fail('No pre_run found - bad order.')
			utils.fail('Expected {!r} found {!r}.'.format(exp, line))
	print('Test succeeded.')


if __name__ == '__main__':
	try:
		main()
	finally:
		cleanup()
