#!/usr/bin/python2.7
#
# Univention Portal Server
#  tornado based server
#
# Copyright 2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import json
from base64 import b64decode

import tornado.ioloop
import tornado.web
import saml2
from saml2.client import Saml2Client

from univention.config_registry import ConfigRegistry
from univention.udm import UDM
from univention.udm.encoders import Base64BinaryProperty

def get_portal(request):
	# TODO?
	ucr = ConfigRegistry()
	ucr.load()
	udm = UDM.machine().version(1)
	localhost = udm.obj_by_dn(ucr.get('ldap/hostdn'))
	return localhost.props.portal.obj

def is_admin(user):
	if user is None:
		return False
	ucr = ConfigRegistry()
	ucr.load()
	admin_group_name = ucr.get('groups/default/domainadmins', 'Domain Admins')
	udm = UDM.machine().version(1)
	admins = udm.get('groups/group').get_by_id(admin_group_name)
	return admins.dn in user.prop.groups

def get_user(request):
	# TODO
	return None

def may_view_entry(entry, user, admin):
	if admin and is_admin(user):
		return True
	# TODO
	return True

def may_edit_obj(entry, user):
	return is_admin(user)

def may_edit_objs(module_name, user):
	return is_admin(user)

def jsonify_props(obj):
	ret = {'dn': obj.dn}
	for k, v in obj.props.__dict__.iteritems():
		if str(k).startswith('_'):
			continue
		if isinstance(v, Base64BinaryProperty):
			v = v.encoded
		ret[k] = v
	return ret

class PortalHandler(tornado.web.RequestHandler):
	def put(self):
		portal = get_portal(self)
		props = jsonify_props(portal)
		self.write(props)

	def get(self):
		udm = UDM.machine().version(1)
		portal = get_portal(self)
		props = jsonify_props(portal)
		new_content = []
		user = get_user(self)
		admin = self.get_query_argument('admin', False)
		content = props.pop('content')
		for cat, entries in content:
			new_entries = []
			for entry_dn in entries:
				entry = udm.get('settings/portal_entry').get(entry_dn)
				if may_view_entry(entry, user, admin):
					new_entries.append(entry)
			if len(new_entries) == 0:
				continue
			entries = [obj.dn for obj in new_entries]
			new_content.append((cat, entries))
		props['content'] = new_content
		self.write(props)

class CategoryHandler(tornado.web.RequestHandler):
	udm_module = 'settings/portal_category'
	def get(self, id):
		# ignore id
		portal = get_portal(self)
		dns = [x[0] for x in portal.props.content]
		udm = UDM.machine().version(1)
		objs = [udm.get(self.udm_module).get(dn) for dn in dns]
		ret = {}
		for obj in objs:
			ret[obj.dn] = jsonify_props(obj)
		self.write(ret)

	def post(self, id):
		# ignore id
		udm = UDM.machine().version(1)
		user = get_user(self)
		if may_edit_objs(self.udm_module, user):
			obj = udm.get(self.udm_module).new()
			data = json.loads(self.request.body)['data']
			for key, value in data.iteritems():
				setattr(obj.props, key, value)
			obj.save()

	def put(self, id):
		udm = UDM.machine().version(1)
		obj = udm.get(self.udm_module).get(id)
		user = get_user(self)
		if may_edit_obj(obj, user):
			data = json.loads(self.request.body)['data']
			for key, value in data.iteritems():
				setattr(obj.props, key, value)
			obj.save()

	def delete(self, id):
		udm = UDM.machine().version(1)
		obj = udm.get(self.udm_module).get(id)
		user = get_user(self)
		if may_edit_obj(obj, user):
			portal = get_portal(self)
			content = portal.props.content
			new_content = []
			for cat, entries in content:
				if cat == obj.dn:
					continue
				new_content.append((cat, entries))
			portal.props.content = new_content
			portal.save()


class EntryHandler(tornado.web.RequestHandler):
	udm_module = 'settings/portal_entry'
	def get(self, id):
		udm = UDM.machine().version(1)
		user = get_user(self)
		admin = self.get_query_argument('admin', False)
		if id:
			objs = [udm.get(self.udm_module).get(id)]
			objs = [obj for obj in objs if may_view_entry(obj, user, admin)]
			self.write({'result': [jsonify_props(obj) for obj in objs]})
		else:
			portal = get_portal(self)
			dns = []
			for x in portal.props.content:
				dns.extend(x[1])
			objs = [udm.get(self.udm_module).get(dn) for dn in dns]
			objs = [obj for obj in objs if may_view_entry(obj, user, admin)]
			self.write({'result': [jsonify_props(obj) for obj in objs]})

	def post(self, id):
		# ignore id
		udm = UDM.machine().version(1)
		user = get_user(self)
		if may_edit_objs(self.udm_module, user):
			obj = udm.get(self.udm_module).new()
			data = json.loads(self.request.body)['data']
			category = data.pop('category')
			for key, value in data.iteritems():
				setattr(obj.props, key, value)
			obj.save()
			portal = get_portal(self)
			content = portal.props.content
			new_content = []
			for cat, entries in content:
				if cat == category:
					entries.append(obj.dn)
				new_content.append((cat, entries))
			portal.props.content = new_content
			portal.save()

	def put(self, id):
		udm = UDM.machine().version(1)
		obj = udm.get(self.udm_module).get(id)
		user = get_user(self)
		if may_edit_obj(obj, user):
			data = json.loads(self.request.body)['data']
			for key, value in data.iteritems():
				setattr(obj.props, key, value)
			obj.save()

	def delete(self, id):
		udm = UDM.machine().version(1)
		obj = udm.get(self.udm_module).get(id)
		user = get_user(self)
		if may_edit_obj(obj, user):
			portal = get_portal(self)
			content = portal.props.content
			new_content = []
			for cat, entries in content:
				if obj.dn in entries:
					entries.remove(obj.dn)
					if not entries:
						continue
				new_content.append((cat, entries))
			portal.props.content = new_content
			portal.save()

class LoginHandler(tornado.web.RequestHandler):
	def get(self):
		self.redirect('https://ucs-sso.sparka-43.intranet/simplesamlphp/saml2/idp/SSOService.php?spentityid=https://master90.sparka-43.intranet/univention/portal')

class SamlHandler(tornado.web.RequestHandler):
	def post(self):
		response = self.get_body_argument('SAMLResponse')
		#response = b64decode(response)
		sp = Saml2Client(config_file='/usr/share/univention-portal/sp.py')
		authn_response = sp.parse_authn_request_response(response, saml2.BINDING_HTTP_POST)
		username = authn_response.name_id.text
		self.write(username)

def make_app():
	return tornado.web.Application([
		(r"/portal/login", LoginHandler),
		(r"/portal/saml/", SamlHandler),
		(r"/portal/portals/", PortalHandler),
		(r"/portal/categories/(.*)", CategoryHandler),
		(r"/portal/entries/(.*)", EntryHandler),
	])

if __name__ == "__main__":
	app = make_app()
	app.listen(4788)
	tornado.ioloop.IOLoop.current().start()


#DN: SAMLServiceProviderIdentifier=https://master90.sparka-43.intranet/univention/portal,cn=saml-serviceprovider,cn=univention,dc=sparka-43,dc=intranet
#  AssertionConsumerService: https://master90.sparka-43.intranet/portal/saml/
#  Identifier: https://master90.sparka-43.intranet/univention/portal
#  NameIDFormat: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
#  attributesNameFormat: None
#  isActivated: TRUE
#  privacypolicyURL: None
#  rawsimplesamlSPconfig: None
#  serviceProviderMetadata: None
#  serviceProviderOrganizationName: Univention Portal master90.sparka-43.intranet
#  serviceproviderdescription: None
#  simplesamlAttributes: FALSE
#  simplesamlNameIDAttribute: uid
#  singleLogoutService: None
# 
