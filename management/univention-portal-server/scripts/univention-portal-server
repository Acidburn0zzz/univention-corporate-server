#!/usr/bin/python2.7
#
# Univention Portal Server
#  tornado based server
#
# Copyright 2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import tornado.ioloop
import tornado.web

from univention.config_registry import ConfigRegistry
from univention.udm import UDM
from univention.udm.encoders import Base64BinaryProperty

def get_portal():
	ucr = ConfigRegistry()
	ucr.load()
	udm = UDM.machine().version(1)
	localhost = udm.obj_by_dn(ucr.get('ldap/hostdn'))
	return localhost.props.portal.obj

def may_view_entry(entry):
	return True

def jsonify_props(obj):
	ret = {'dn': obj.dn}
	for k, v in obj.props.__dict__.iteritems():
		if str(k).startswith('_'):
			continue
		if isinstance(v, Base64BinaryProperty):
			v = v.encoded
		ret[k] = v
	return ret

class PortalHandler(tornado.web.RequestHandler):

	def put(self):
		portal = get_portal()
		props = jsonify_props(portal)
		self.write(props)

	def get(self):
		portal = get_portal()
		props = jsonify_props(portal)
		self.write(props)

class CategoryHandler(tornado.web.RequestHandler):
	def get(self, id):
		# ignore id
		portal = get_portal()
		dns = [x[0] for x in portal.props.content]
		udm = UDM.machine().version(1)
		objs = [udm.get('settings/portal_category').get(dn) for dn in dns]
		self.write({'result': [jsonify_props(obj) for obj in objs]})

class EntryHandler(tornado.web.RequestHandler):
	def get(self, id):
		portal = get_portal()
		udm = UDM.machine().version(1)
		if not id:
			dns = []
			for x in portal.props.content:
				dns.extend(x[1])
			objs = [udm.get('settings/portal_entry').get(dn) for dn in dns]
			objs = [obj for obj in objs if may_view_entry(obj)]
			self.write({'result': [jsonify_props(obj) for obj in objs]})
		else:
			obj = udm.get('settings/portal_entry').get(id)
			if may_view_entry(obj):
				self.write(jsonify_props(obj))

def make_app():
	return tornado.web.Application([
		(r"/portal/portals/", PortalHandler),
		(r"/portal/categories/(.*)", CategoryHandler),
		(r"/portal/entries/(.*)", EntryHandler),
	])

if __name__ == "__main__":
	app = make_app()
	app.listen(4788)
	tornado.ioloop.IOLoop.current().start()
